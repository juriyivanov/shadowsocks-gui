diff a/src/mainwindow.cpp b/src/mainwindow.cpp	(rejected hunks)
@@ -131,51 +131,51 @@ MainWindow::MainWindow(ConfigHelper *confHelper, QWidget *parent) :
             this, &MainWindow::onCustomContextMenuRequested);
 
     checkCurrentIndex();
 
     // Restore mainWindow's geometry and state
     restoreGeometry(configHelper->getMainWindowGeometry());
     restoreState(configHelper->getMainWindowState());
     ui->connectionView->horizontalHeader()->restoreGeometry(configHelper->getTableGeometry());
     ui->connectionView->horizontalHeader()->restoreState(configHelper->getTableState());
 }
 
 MainWindow::~MainWindow()
 {
     configHelper->save(*model);
     configHelper->setTableGeometry(ui->connectionView->horizontalHeader()->saveGeometry());
     configHelper->setTableState(ui->connectionView->horizontalHeader()->saveState());
     configHelper->setMainWindowGeometry(saveGeometry());
     configHelper->setMainWindowState(saveState());
 
     // delete ui after everything in case it's deleted while still needed for
     // the functions written above
     delete ui;
 }
 
 const QUrl MainWindow::issueUrl =
-        QUrl("https://github.com/shadowsocks/shadowsocks-qt5/issues");
+        QUrl("https://github.com/juriyivanov/shadowsocks-gui/issues");
 
 void MainWindow::startAutoStartConnections()
 {
     configHelper->startAllAutoStart(*model);
 }
 
 void MainWindow::onImportGuiJson()
 {
     QString file = QFileDialog::getOpenFileName(
                    this,
                    tr("Import Connections from gui-config.json"),
                    QString(),
                    "GUI Configuration (gui-config.json)");
     if (!file.isNull()) {
         configHelper->importGuiConfigJson(model, file);
     }
 }
 
 void MainWindow::onExportGuiJson()
 {
     QString file = QFileDialog::getSaveFileName(
                    this,
                    tr("Export Connections as gui-config.json"),
                    QString("gui-config.json"),
                    "GUI Configuration (gui-config.json)");
@@ -409,59 +409,59 @@ void MainWindow::checkCurrentIndex(const QModelIndex &_index)
     const bool valid = index.isValid();
     ui->actionTestLatency->setEnabled(valid);
     ui->actionEdit->setEnabled(valid);
     ui->actionDelete->setEnabled(valid);
     ui->actionShare->setEnabled(valid);
     ui->actionMoveUp->setEnabled(valid ? _index.row() > 0 : false);
     ui->actionMoveDown->setEnabled(valid ?
                                    _index.row() < model->rowCount() - 1 :
                                    false);
 
     if (valid) {
         const bool &running =
                 model->getItem(index.row())->getConnection()->isRunning();
         ui->actionConnect->setEnabled(!running);
         ui->actionForceConnect->setEnabled(!running);
         ui->actionDisconnect->setEnabled(running);
     } else {
         ui->actionConnect->setEnabled(false);
         ui->actionForceConnect->setEnabled(false);
         ui->actionDisconnect->setEnabled(false);
     }
 }
 
 void MainWindow::onAbout()
 {
-    QString text = QString("<h1>Shadowsocks-Qt5</h1><p><b>Version %1</b><br />"
+    QString text = QString("<h1>Shadowsocks GUI</h1><p><b>Version %1</b><br />"
             "Using libQtShadowsocks %2</p>"
             "<p>Copyright Â© 2014-2018 Symeon Huang "
             "(<a href='https://twitter.com/librehat'>"
             "@librehat</a>)</p>"
             "<p>License: <a href='http://www.gnu.org/licenses/lgpl.html'>"
             "GNU Lesser General Public License Version 3</a><br />"
             "Project Hosted at "
-            "<a href='https://github.com/shadowsocks/shadowsocks-qt5'>"
+            "<a href='https://github.com/juriyivanov/shadowsocks-gui'>"
             "GitHub</a></p>")
             .arg(QStringLiteral(APP_VERSION))
             .arg(QSS::Common::version());
     QMessageBox::about(this, tr("About"), text);
 }
 
 void MainWindow::onReportBug()
 {
     QDesktopServices::openUrl(issueUrl);
 }
 
 void MainWindow::onCustomContextMenuRequested(const QPoint &pos)
 {
     this->checkCurrentIndex(ui->connectionView->indexAt(pos));
     ui->menuConnection->popup(ui->connectionView->viewport()->mapToGlobal(pos));
 }
 
 void MainWindow::onFilterToggled(bool show)
 {
     if (show) {
         ui->filterLineEdit->setFocus();
     }
 }
 
 void MainWindow::onFilterTextChanged(const QString &text)
